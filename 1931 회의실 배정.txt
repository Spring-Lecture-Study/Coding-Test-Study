1931 회의실 배정


여러 회의들의 시작시간과 끝나느시간이 주어지고
한번에 회의를 한번만 할 수 있을때, 회의를 최대 몇번 가능한가 구하는 문제이다

이전회의가 끝나야 새로운 회의를 실행할 수 있기에,
입력값(시작시간,끝나는시간)을 2차 배열에 담아주고, 끝나는시간을 기준으로 정렬해준다.
그 뒤 가장빨리 끝나는 회의를 진행하고, 끝난 시간 이후에  가장 빨리 끝나는 회의중 가장 빨리 시작하는 회의를 진행한다.

자바에는 2번째 요소를 기준으로 정렬하는 메소드가

import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            arr[i][0] = Integer.parseInt(st.nextToken());
            arr[i][1] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(meeting, (o1, o2) -> {
			// 끝나는 시간이 같으면 시작시간이 빠른 순으로 정렬
            if(o1[1] == o2[1]) {
                return Integer.compare(o1[0], o2[0]);
            } else {
                return Integer.compare(o1[1], o2[1]);
            } 
        });

        
        int endTime = meeting[0][1]; 
        int result = 1;
        
        for(int i =  1; i<count; i++) {
            if(meeting[i][0] >= endTime ) {
                endTime = meeting[i][1];
                result++;
            } else {
                continue;
            }
        }
        
        System.out.println(result);
	}
}