## 문제

N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.

- N개의 자연수 중에서 M개를 고른 수열
- 고른 수열은 비내림차순이어야 한다.
    - 길이가 K인 수열 A가 A ≤ A ≤ ... ≤ A ≤ A를 만족하면, 비내림차순이라고 한다.
        
        1
        
        2
        
        K-1
        
        K
        

## 입력

첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)

둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.

## 출력

한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.

수열은 사전 순으로 증가하는 순서로 출력해야 한다.

# 풀이

기존 n과 m문제들과 유사하지만 비내림차순 즉 오름차순이지만 같은 숫자가 이어서 나와도 된다. 또한 문제에 n개의 수가 다 다르다는 조건이 없기 때문에 같은 숫자가 있는 경우 중복이 발생할 수 있다.

ex) 

4 2
9 7 9 1
이 입력으로 들어오면, 9가 두개이기 때문에 1 9, 1 9 이렇게 두번 나오는 경우를 처리해줘야한다.
따라서 처음에 주어진 숫자를 정렬을 해준뒤 dfs를 나올때 이전 값을 저장해두고 다음 dfs에서 이전 값과 같다면 패스해준다.

# 코드

```java

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class Main {
    static int[] arr;
    static int n;
    static int m;
    static StringBuilder sb;
    static int[] ans;

    public static void main(String args[]) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new int[n];
        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }
        Arrays.sort(arr);

        ans = new int[m];
        sb = new StringBuilder();

        dfs(0,0);
        System.out.println(sb);

    }

    public static void dfs(int start, int depth) {
        if (depth == m) {

            for (int a : ans) {
                sb.append(a).append(" ");
            }
            sb.append("\n");

            return;
        }
        int before=0;
        for (int i = start; i < n; i++) {
            if(arr[i]==before){
                continue;
            }
            ans[depth]=arr[i];
            dfs(i+1,depth+1);
            before=arr[i];
        }
    }

}
```
